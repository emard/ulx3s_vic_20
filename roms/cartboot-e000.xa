; this dummy kernel ROM, without BASIC ROM (nobasic.xa),
; can boot few "supported" ROM carts like 
; "alien blitz.prg" 4K and "choplifter.prg" 8K

; usage
; xa cartboot-e000.xa -o cartboot-e000.prg

#define romstart $e000
#define screen   $1000
#define colors   $9400

; *** PRG header start ***
*=romstart-2
	.word reset
; *** PRG header end ***

; *** ROM start ***
*=romstart
reset:
; initialize stack
	ldx #$ff
	txs
	sei

; initialize hardware (screen and VIA)
	LDX	#(vicvia_init_end-vicvia_init)

init_loop:
	LDA	vicvia_init-1,X	; get byte from setup table
	STA	$9000-1,X	; save byte to Vic chip
	DEX			; decrement count/index
	BNE	init_loop       ; loop if more to do

; clear screen and set black-on-white colors
        LDX    #$00
cls_loop:
        LDA    #$20         ; space
        STA    screen-1,X
        STA    screen+256-1,X
        LDA    #$00         ; black on white
        STA    colors-1,X
        STA    colors+256-1,X
        DEX
        BNE    cls_loop

; message on the screen
	LDX	#(screen_message_end-screen_message)/2
message_loop:
	LDA	screen_message-1,X	; get byte from message rom 1st half
	STA	screen-1,X		; save byte to video ram
	LDA	screen_message+(screen_message_end-screen_message)/2-1,X ; get byte from message rom 2nd half
	STA	screen+(screen_message_end-screen_message)/2-1,X	 ; save byte to video ram
	DEX				; decrement count/index
	BNE	message_loop    	; loop if more to do

; initialize CPU status
;	lda #$04
;	pha
;	php
; jump to CART code
	jmp ($A000)

; 23 rows, 22 chars in each row
screen_message:
.byte "*** CART BOOT  ROM ***"
.byte "JMP ($A000)           "
.byte "                      "
.byte "RECOMMENDED ROM CARTS:"
.byte "ALIEN BLITZ         4K"
.byte "ASTROBLITZ PAL      4K"
.byte "TERRAGUARD          4K"
.byte "CHOPLIFTER          8K"
.byte "DEADLY DUCK         8K"
.byte "JELLY MONSTERS      8K"
.byte "KEYQUEST            8K"
.byte "MOTOCROSS RACER     8K"
.byte "RIVER RESCUE        8K"
.byte "ROBIN HOOD          8K"
.byte "SERPENTINE          8K"
.byte "TYPE ATTACK         8K"
.byte "BATTLEZONE         16K"
.byte "MOUNTAIN KING      16K"
.byte "SKYBLAZER          16K"
.byte "SQUISH'EM          16K"
.byte "WWW.ZIMMERS.NET/      "
.byte "ANONFTP/PUB/CBM/VIC20/"
.byte "ROMS                  "
screen_message_end:

vicvia_init:
	.byte	$0C			; interlace and horizontal center [PAL]
;	.byte	$05			; interlace and horizontal center [NTSC]
					; bit	function
					; ---	--------
					;  7	interlace / non interlace
					; 6-0	horizontal origin
	.byte	$26			; vertical origin [PAL]
;	.byte	$19			; vertical origin [NTSC]
	.byte	$16			; video address and colums, $9400 for colour RAM
					; bit	function
					; ---	--------
					;  7	video address va9
					; 6-0	number of columns
	.byte	$2E			; rows and character size
					; bit	function
					; ---	--------
					;  7	b9 raster line
					; 6-1	number of rows
					;  0	8x16 / 8x8 characters
	.byte	$00			; raster line
	.byte	$C2			; video memory addresses, RAM $1000, ROM $8000
					; bit	function
					; ---	--------
					;  7	must be 1
					; 6-4	video memory address va12-va10
					; 3-0	character memory start address

					; 0000 ROM	$8000 set 1
					; 0001  "	$8400
					; 0010  "	$8800 set 2 <- we use this
					; 0011  "	$8C00
					; 1100 RAM	$1000 <- we use this
					; 1101  "	$1400
					; 1110  "	$1800
					; 1111  "	$1C00

	.byte	$00			; light pen horizontal position
	.byte	$00			; light pen vertical position

	.byte	$00			; paddle X
	.byte	$00			; paddle Y
	.byte	$00			; oscillator 1 frequency
	.byte	$00			; oscillator 2 frequency
	.byte	$00			; oscillator 3 frequency
	.byte	$00			; noise source frequency
	.byte	$00			; aux colour and volume
					; bit	function
					; ---	--------
					; 7-4	auxiliary colour information
					; 3-0	volume
	.byte	$1B			; screen and border colour
					; bit	function
					; ---	--------
					; 7-4	background colour
					;  3	inverted or normal mode
					; 2-0	border colour

; VIA1
;       0    1    2    3    4    5    6    7
.byte $00, $00, $00, $80, $00, $00, $00, $00
.byte $00, $00, $00, $7E, $FE, $00, $7F, $00
;       8    9    a    b    c    d    e    f
; VIA2
;       0    1    2    3    4    5    6    7
.byte $00, $00, $7F, $00, $00, $00, $00, $00
.byte $00, $00, $00, $40, $DE, $00, $7F, $00
;       8    9    a    b    c    d    e    f
vicvia_init_end:
nop

irq:
	PHA				; save A
	TXA				; copy X
	PHA				; save X
	TYA				; copy Y
	PHA				; save Y
	TSX				; copy stack pointer
	LDA	$0100+4,X		; get the stacked status register
	AND	#$10			; mask the BRK flag bit
	BEQ	irqvec			; if not BRK go do the hardware IRQ vector

	JMP	($0316)			; else do the BRK vector (iBRK)

irqvec:
	JMP	($0314)			; do IRQ vector (iIRQ)

nmi:
	sei
	jmp	($0318)


	.dsb $FFFA-* ; Pad with zeroes from PC to $fffa
vectors:
	.word nmi
	.word reset
	.word irq
